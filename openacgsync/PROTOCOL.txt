协议规范
============

OpenACGSync 版本1.0，协议的规范。

1. 传输模式
OpenACGSync是一个基于HTTP传输协议的一种数据规范。可用于任何兼容HTTP协议的情况。
我们需要服务器和客户端都支持 Http/1.1 协议。同时若将HTTP协议通过HTTPS 或是隧道
加密也是可以接受的。

2. 协议数据规范
协议的数据将以 ASCII 模式传输，不会涉及到二进制等转换问题。数据通过一个HTTP POST
请求传送的服务器。

3. 数据模式
所有的传输都是由客户端发起，向服务器的请求，其包含两个有效字段，由空格(SPACE)
分割，第二个字段还可以产生出若干子字段。同时，一个数据块可能还会有一个认证块
部分，其由方括号括起，并与下面的信息以一个换行隔开。数据还可能包含一个状态头，
这个由括号括起 "("。头部与信息部以一个换行 \n 隔开。

[<AUTH BLOCK>]
(<HEAD>)
<ACTION> <DATA>

一下是一个认证的传输的样例：

[UIID=2jd0230j923898ej29h834n|SESN=029ff|DEVID=9287KTK-N-R]
(Time: 2012-01-01 23:58:10 GMT+8|Client: ChottoBilibili v1|Protocol: 1)
NOTIFY BANGUMI WATCHED [5rWL6K+V55Wq5Ymn][8][DvR-7kT](5b6I5aW955yL5ZWK6L+Z5Liq77yB){source:av192837}

下面是一个一般的传输样例

NOTIFY BANGUMI FOLLOW [5rWL6K+V][0][DvR-7kT](5oiR5byA5aeL6L+944CK5rWL6K+V44CL5LqG77yB){site:bilibili,static:none}

4. ACTION字段
ACTION字段是一个简短的对服务器表明目的的标签
ACTION 有一下的几个默认实现，这些实现会被所有兼容协议的服务器端实现：

	NOTIFY : 通告服务器一个状态
	NEGOTIATE : 与服务器协定某个扩展功能（ACTION）是否可用
	UPDATE : 给服务器提交某种数据变化
	CREDENTIALS : 提供登陆能力
	QUERY : 查询某种状态

5. AUTH认证字段
AUTH认证字段提供给需要认证信息的服务器使用，其中有三个认证模式。
 a) 会话安全模式认证
    [UIID=<一个颁发给USER的ID>|SESN=<会话钥匙>|DEVID=<设备ID/客户端ID>]

	获取这些登陆条件，需要由客户端发起一个 CREDENTIALS 请求，类似：
	[DEVID=<设备ID>]
	(Time: 2013-02-15 21:45:00 GMT-5|Client: ChottoBilibili v1|Protocol: 1)
	CREDENTIALS up:dT1qYWJiYW55JnA9UEFTU1dPUkQ=
	
	其中 CREDENTIALS 后面跟随一套服务器可能支持的模式。这个有可能需要用户设置同步时进行自定义。
	我们推荐如下的一些默认 CREDENTIALS 请求的尾缀信息模板
		
		i. 用户名/密码 模板
			up:base64("u=<USERNAME>&p=<PASSWORD>")
			
			请注意这个模板不是特别安全，可能导致密码被嗅探，但是本质上跟用户登录一样
			站点或许可以允许用户设定一个同步用的密码（区别于登陆密码）
			判断登陆是否成功由服务器决定，所以 u 跟 p 可以是任何身份验证对
		
		ii. token 模板
			tok:<TOKEN>
			
			站点给用户颁发一个token，每次通过token 登陆。建议允许用户在站内删除或者解除
			token有效性来解决可能被冒用的危险。
		
		iii. 哈希链（安全！）
			hc:sha1^<N>(<KEY>)
			
			服务器保存一份被 sha1 轮回执行 N+1 次的Hash密码，用户本地保存 <N>与<KEY>。认证时，
			用户将<KEY>进行 <N>次哈希运算，把结果发送到服务器，服务器比对 
				sha1(用户传来的KEY) ==  自己保存的KEY，若通过，则用用户传来的 KEY 替换掉原来保存的
			key。这种方式可以有效阻止重放攻击。当客户端 <N>值即将耗尽的时候，会通知用户生成
			新的密码系列。
			
			
		vi. 服务器自定义的模板
			custom:<TEMPLATE>
			
			服务器自定义一个模板字符串，跟TOKEN模式非常相似。。。大概
	
	服务器的返回：CREDENTIALS协议一般期待服务器返回一种认证钥匙，有时这些钥匙可能是临时的，也有时
		服务器可以选择给一个长期钥匙
		
		-认证成功
			AUTH:OK
			ASSIGN:UIID=<USER_INDEX_ID>|SESN=<SESSION_KEY>
		（或者可选择继续供应：IV, LIFE）
		
		以后认证发送 sha1(SESSION_KEY + IV) ，服务器端计算 <收到的SESSION_KEY> == sha1(保存的SESSION_KEY + IV)
		并更新保存的SESSION_KEY = New Session Key, IV = (New Session Key + IV)。如果IV不被劫持，第三方无法计算下次使用的SESSION_KEY。
		LIFE是一个整形数字 (0-2147483647)，如果给出每次计算新的SESSION_KEY都回递减一次 LIFE，当LIFE达到 0 时客户端将放弃当前的SESSION_KEY
		强制重新发送 CREDENTIALS
		
		当然这不能防止第三方在第一时间截获 SESN 与 IV 并先行发送请求。一般来说对于大部分网络服务这种等级的安全是充足的
		（甚至还会稍高于需求）
		
		-认证需要提升了的安全等级
			AUTH:UPGRADE
			ASSIGN:UIID=<USER_INDEX_ID>
			EXCHANGE:<ENCRYPTED KEY>
		
		提升的安全等级会在交换钥匙时采用安全的方法，EXCHANGE返回的KEY是服务器加密后的会话钥匙，客户端拿到EXCHANGE后，将生成一个与
		EXCHANGE位数长度相等的一次性钥匙并XOR加密]返回服务器。
		
			[UIID=<USER_INDEX_ID>|EXCHANGE=<生成的新钥匙>|DEVID=<设备ID>]
			(Time: 2013-02-15 21:45:00 GMT-5|Client: ChottoBilibili v1|Protocol: 1)
			CREDENTIALS EXPECT UPGRADE
		
		这时候服务器应该从收到的EXCHANGE上去除自己的加密，**并丢弃当初加密EXCHANGE的钥匙**。服务器将结果返回客户端。
		
			AUTH:UPGRADED
			EXCHANGE:<DECRYPTED_ENCRYPTED_KEY>
			
		这时客户端只要使用自己的临时密码再次解密后就可以安全的获取交换到的KEY了。如果第三方发起主动攻击，由于服务器端的KEY会在
		第三方试图获取新的EXCHANGE后丢弃，即使第三方能借此获取当初KEY加密的
		
		
6. HEAD头部
头部字段是可选字段，其中包含发布的时间/客户端版本等状态信息。客户端可以选择不发送头部来节省带宽。
头部字段的格式为：

	字段名称 + ": " + 字段内容 + "|" <- 分割线

以下有几个比较常见的头字段和参考的信息格式。头字段中的数据，服务器可以选择不去处理，或用自己的方法处理。
所以请不要依赖头字段来传输重要的信息。

	Time: YYYY-MM-DD HH:II:SS <TIMEZONE>
	Client: <CLIENT_IDENT_STRING>
	Protocol: <PROTOCOL_VERSION>
	Location: [-]d.d, [-]d.d (South & West Degrees)
	Comment: <TEXT>
	Privacy: <(PUBLIC|PRIVATE)>
	